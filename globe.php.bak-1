<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Google Earth-like Globe</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body { margin: 0; overflow: hidden; }
        #globe-container { width: 100vw; height: 100vh; }
    </style>
</head>
<body class="bg-gray-900">
    <div id="globe-container"></div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
    
    <script>
        let scene, camera, renderer, globe, controls;
        const STAR_COUNT = 10000;
        
        function init() {
            // Scene setup
            scene = new THREE.Scene();
            
            // Camera setup
            camera = new THREE.PerspectiveCamera(45, window.innerWidth/window.innerHeight, 0.1, 1000);
            camera.position.z = 2.5;

            // Renderer setup
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setPixelRatio(window.devicePixelRatio);
            document.getElementById('globe-container').appendChild(renderer.domElement);

            // Add controls
            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.05;
            controls.rotateSpeed = 0.5;
            controls.minDistance = 1.5;
            controls.maxDistance = 10;

            // Create Earth
            createEarth();
            createAtmosphere();
            createStars();
            addLights();

            // Event listeners
            window.addEventListener('resize', onWindowResize);
        }

        function createEarth() {
            const textureLoader = new THREE.TextureLoader();
            const earthTexture = textureLoader.load('https://threejs.org/examples/textures/planets/earth_atmos_2048.jpg');
            const bumpMap = textureLoader.load('https://threejs.org/examples/textures/planets/earth_normal_2048.jpg');
            const specularMap = textureLoader.load('https://threejs.org/examples/textures/planets/earth_specular_2048.jpg');

            const geometry = new THREE.SphereGeometry(1, 64, 64);
            const material = new THREE.MeshPhongMaterial({
                map: earthTexture,
                bumpMap: bumpMap,
                bumpScale: 0.05,
                specularMap: specularMap,
                specular: new THREE.Color('grey'),
                shininess: 5
            });

            globe = new THREE.Mesh(geometry, material);
            scene.add(globe);
        }

        function createAtmosphere() {
            const geometry = new THREE.SphereGeometry(1.02, 64, 64);
            const material = new THREE.ShaderMaterial({
                vertexShader: `
                    varying vec3 vNormal;
                    void main() {
                        vNormal = normalize(normalMatrix * normal);
                        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
                    }
                `,
                fragmentShader: `
                    varying vec3 vNormal;
                    void main() {
                        float intensity = pow(0.6 - dot(vNormal, vec3(0.0, 0.0, 1.0)), 2.0);
                        gl_FragColor = vec4(0.3, 0.6, 1.0, 0.15) * intensity;
                    }
                `,
                blending: THREE.AdditiveBlending,
                side: THREE.BackSide
            });

            atmosphere = new THREE.Mesh(geometry, material);
            scene.add(atmosphere);
        }

        function createStars() {
            const geometry = new THREE.BufferGeometry();
            const positions = new Float32Array(STAR_COUNT * 3);

            for (let i = 0; i < STAR_COUNT * 3; i += 3) {
                positions[i] = (Math.random() - 0.5) * 2000;
                positions[i+1] = (Math.random() - 0.5) * 2000;
                positions[i+2] = (Math.random() - 0.5) * 2000;
            }

            geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
            const stars = new THREE.Points(
                geometry,
                new THREE.PointsMaterial({ color: 0xFFFFFF, size: 0.1 })
            );
            scene.add(stars);
        }

        function addLights() {
            const ambientLight = new THREE.AmbientLight(0x404040);
            scene.add(ambientLight);

            const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
            directionalLight.position.set(5, 3, 5);
            scene.add(directionalLight);
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        function animate() {
            requestAnimationFrame(animate);
            controls.update();
            globe.rotation.y += 0.0002;
            renderer.render(scene, camera);
        }

        window.onload = () => {
            init();
            animate();
        };
    </script>
</body>
</html>
