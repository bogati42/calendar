<?php

class NepaliCalendar {
    // Data array defining the number of days in each month for each BS year
    private $bs = [
        [2000, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        [2001, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        [2002, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        [2003, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        [2004, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        [2005, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        [2006, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        [2007, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        [2008, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
        [2009, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        [2010, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        [2011, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        [2012, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
        [2013, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        [2014, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        [2015, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        [2016, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
        [2017, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        [2018, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        [2019, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        [2020, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
        [2021, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        [2022, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
        [2023, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        [2024, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
        [2025, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        [2026, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        [2027, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        [2028, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        [2029, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],
        [2030, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        [2031, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        [2032, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        [2033, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        [2034, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        [2035, 30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
        [2036, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        [2037, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        [2038, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        [2039, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
        [2040, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        [2041, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        [2042, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        [2043, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
        [2044, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        [2045, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        [2046, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        [2047, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
        [2048, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        [2049, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
        [2050, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        [2051, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
        [2052, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        [2053, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
        [2054, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        [2055, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        [2056, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],
        [2057, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        [2058, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        [2059, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        [2060, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        [2061, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        [2062, 30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31],
        [2063, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        [2064, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        [2065, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        [2066, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
        [2067, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        [2068, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        [2069, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        [2070, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
        [2071, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        [2072, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        [2073, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        [2074, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
        [2075, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        [2076, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
        [2077, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        [2078, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
        [2079, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        [2080, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
        [2081, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        [2082, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        [2083, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        [2084, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
        [2085, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
        [2086, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
        [2087, 31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30],
        [2088, 30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30],
        [2089, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
        [2090, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
    ];

    // Reference points for AD to BS conversion
    // Format: [AD_Year, AD_Month, AD_Day, BS_Year, BS_Month, BS_Day]
    private $ad_to_bs = [
        [1943, 4, 14, 2000, 1, 1], // AD 1943 Apr 14 is BS 2000 Baisakh 1
        [2025, 4, 14, 2082, 1, 1]  // AD 2025 Apr 14 is BS 2082 Baisakh 1 (This is the current reference)
    ];

    // Nepali numeral mapping for display
    private $nepali_numbers = [
        0 => '०', 1 => '१', 2 => '२', 3 => '३', 4 => '४',
        5 => '५', 6 => '६', 7 => '७', 8 => '८', 9 => '९'
    ];

    // Nepali month names
    private $nep_months = [
        1 => 'बैशाख', 2 => 'जेठ', 3 => 'असार', 4 => 'श्रावण',
        5 => 'भदौ', 6 => 'असोज', 7 => 'कार्तिक', 8 => 'मंसिर',
        9 => 'पुष', 10 => 'माघ', 11 => 'फागुन', 12 => 'चैत'
    ];

    // Nepali day names (Sunday to Saturday)
    private $nep_days = [
        1 => 'आइतबार', 2 => 'सोमबार', 3 => 'मंगलबार', 4 => 'बुधबार',
        5 => 'बिहिबार', 6 => 'शुक्रबार', 7 => 'शनिबार'
    ];

    /**
     * Gets the current Nepali (BS) date based on the current AD date in Kathmandu timezone.
     * @return array Associative array with 'year', 'month', 'day' for the BS date.
     */
    public function getCurrentBSDate() {
        // Set timezone to Asia/Kathmandu to ensure correct current date/time in Nepal
        $today = new DateTime('now', new DateTimeZone('Asia/Kathmandu'));
        $ad_year = (int)$today->format('Y');
        $ad_month = (int)$today->format('m');
        $ad_day = (int)$today->format('d');

        return $this->convertADtoBS($ad_year, $ad_month, $ad_day);
    }

    /**
     * Converts a Gregorian (AD) date to a Nepali (BS) date.
     * @param int $ad_year Gregorian year.
     * @param int $ad_month Gregorian month.
     * @param int $ad_day Gregorian day.
     * @return array Associative array with 'year', 'month', 'day' for the BS date.
     */
    private function convertADtoBS($ad_year, $ad_month, $ad_day) {
        // Find the closest reference point from the ad_to_bs mapping
        $ref = $this->findClosestReference($ad_year);
        
        // Calculate the difference in days between the reference AD date and the input AD date
        $days_diff = $this->countDaysDifference(
            $ref[0], $ref[1], $ref[2], // Reference AD date (year, month, day)
            $ad_year, $ad_month, $ad_day // Input AD date (year, month, day)
        );

        // Add this day difference to the corresponding BS reference date
        return $this->addDaysToBS($ref[3], $ref[4], $ref[5], $days_diff); // Reference BS date + days_diff
    }

    /**
     * Finds the closest reference point in the ad_to_bs array that is before or equal to the given AD year.
     * @param int $ad_year The AD year to find a reference for.
     * @return array The closest reference array [AD_Y, AD_M, AD_D, BS_Y, BS_M, BS_D].
     */
    private function findClosestReference($ad_year) {
        $closest_ref = $this->ad_to_bs[0]; // Start with the first reference
        foreach ($this->ad_to_bs as $ref) {
            if ($ad_year >= $ref[0]) { // If the current AD year is after or equal to the reference's AD year
                $closest_ref = $ref; // This is a better (closer) reference
            } else {
                // Since the ad_to_bs array is sorted by AD year, once we pass the target year,
                // the previous one was the closest.
                break;
            }
        }
        return $closest_ref;
    }

    /**
     * Counts the number of days between two Gregorian (AD) dates.
     * Uses the Julian Day Count for accurate difference calculation.
     * @param int $from_year Start Gregorian year.
     * @param int $from_month Start Gregorian month.
     * @param int $from_day Start Gregorian day.
     * @param int $to_year End Gregorian year.
     * @param int $to_month End Gregorian month.
     * @param int $to_day End Gregorian day.
     * @return int The number of days between the two dates (can be negative).
     */
    private function countDaysDifference($from_year, $from_month, $from_day,
                                         $to_year, $to_month, $to_day) {
        $from_jd = gregoriantojd($from_month, $from_day, $from_year);
        $to_jd = gregoriantojd($to_month, $to_day, $to_year);
        return $to_jd - $from_jd;
    }

    /**
     * Adds a given number of days to a Nepali (BS) date, handling month and year rollovers.
     * @param int $year BS year.
     * @param int $month BS month.
     * @param int $day BS day.
     * @param int $days_to_add Number of days to add.
     * @return array Associative array with 'year', 'month', 'day' for the new BS date.
     */
    private function addDaysToBS($year, $month, $day, $days_to_add) {
        while ($days_to_add > 0) {
            $day++;
            $days_to_add--;

            // Find the correct year's day-lengths data
            $year_index = array_search($year, array_column($this->bs, 0));
            if ($year_index === false) {
                // Fallback to the latest year available if the specific year is out of range
                // This assumes the patterns continue, which is an approximation for years far out of range.
                $year_index = array_search(2090, array_column($this->bs, 0));
            }
            
            // Check if current day exceeds days in current month
            if ($day > $this->bs[$year_index][$month]) {
                $month++; // Move to next month
                $day = 1; // Reset day to 1

                if ($month > 12) { // Check for year rollover
                    $year++; // Move to next year
                    $month = 1; // Reset month to Baisakh (1)
                }
            }
        }

        return ['year' => $year, 'month' => $month, 'day' => $day];
    }

    /**
     * Converts a number to its Nepali numeral representation.
     * E.g., 123 -> १२३
     * @param int $number The number to convert.
     * @return string The Nepali numeral string.
     */
    private function convertToNepaliNumeral($number) {
        $nepali_number = '';
        $number_str = (string)$number;

        for ($i = 0; $i < strlen($number_str); $i++) {
            $digit = (int)$number_str[$i];
            if (isset($this->nepali_numbers[$digit])) {
                $nepali_number .= $this->nepali_numbers[$digit];
            } else {
                // Fallback for non-digit characters if any (shouldn't happen with int input)
                $nepali_number .= $number_str[$i];
            }
        }
        return $nepali_number;
    }

    /**
     * Generates the HTML for the Nepali calendar.
     * @param int|null $year The BS year to display (defaults to current if null).
     * @param int|null $month The BS month to display (defaults to current if null).
     * @return string The HTML string for the calendar.
     */
    public function getCalendarHTML($year = null, $month = null) {
        // If year or month are not provided, get the current BS date
        if (!$year || !$month) {
            $current_date = $this->getCurrentBSDate();
            $year = $current_date['year'];
            $month = $current_date['month'];
        }

        // Always get the current date for 'today' highlighting
        $current_date = $this->getCurrentBSDate();
        $holidays = [];
        
        // Try to load holidays from holidays_2082.php
        try {
            // Assuming holidays_2082.php is in the same directory or accessible via include_path
            // This is a direct include, so ensure the file exists and returns an array.
            $loaded_holidays = include 'holidays_2082.php';
            if (is_array($loaded_holidays) && !empty($loaded_holidays)) {
                $holidays = $loaded_holidays;
                error_log('NepaliCalendar: ' . count($holidays) . ' holidays loaded successfully');
            } else {
                error_log('NepaliCalendar: holidays_2082.php returned an empty or non-array value.');
            }
        } catch (Exception $e) {
            error_log('NepaliCalendar: Failed to include holidays_2082.php: ' . $e->getMessage());
        }

        $calendar = "<div class='calendar'>";
        $calendar .= $this->generateNavigation($year, $month);
        $calendar .= $this->generateDaysHeader();
        $calendar .= $this->generateCalendarGrid($year, $month, $current_date, $holidays);
        $calendar .= "</div>";
        return $calendar;
    }

    /**
     * Generates the HTML for the calendar navigation (previous/next month, current month/year display).
     * @param int $year The current BS year.
     * @param int $month The current BS month.
     * @return string The HTML for the navigation section.
     */
    private function generateNavigation($year, $month) {
        $prev_month = $month - 1;
        $prev_year = $year;
        if ($prev_month < 1) {
            $prev_month = 12;
            $prev_year--;
        }

        $next_month = $month + 1;
        $next_year = $year;
        if ($next_month > 12) {
            $next_month = 1;
            $next_year++;
        }

        // Convert the current BS month and year to AD for display in navigation
        $ad_month_year = $this->convertBStoAD($year, $month, 1); // Get AD date for 1st day of BS month
        // mktime uses AD month numbers (1-12)
        $ad_month_name = date("F", mktime(0, 0, 0, $ad_month_year['month'], 1, $ad_month_year['year']));
        $ad_year_val = $ad_month_year['year'];

        $nav = "<div class='navigation'>";
        $nav .= "<button onclick='changeMonth($prev_year, $prev_month)'>&larr;</button>"; // Left arrow
        $nepali_year = $this->convertToNepaliNumeral($year);
        $nav .= "<h2>{$this->nep_months[$month]} $nepali_year <br>($ad_month_name $ad_year_val AD)</h2>"; // Displays both BS and AD
        // Fixed button to pass correct next_year and next_month
        $nav .= "<button onclick='changeMonth($next_year, $next_month)'>&rarr;</button>"; // Right arrow
        $nav .= "</div>";

        return $nav;
    }

    /**
     * Generates the HTML for the days of the week header (Sunday to Saturday).
     * @return string The HTML for the days header.
     */
    private function generateDaysHeader() {
        $header = "<div class='days-header'>";
        foreach ($this->nep_days as $day_name) {
            $header .= "<div class='day-name'>$day_name</div>";
        }
        $header .= "</div>";
        return $header;
    }

    /**
     * Generates the main calendar grid (days of the month).
     * Includes day numbers, English dates, and holiday information.
     * @param int $year The BS year to display.
     * @param int $month The BS month to display.
     * @param array $current_date The current BS date for 'today' highlighting.
     * @param array $holidays An array of holiday data.
     * @return string The HTML for the calendar grid.
     */
    private function generateCalendarGrid($year, $month, $current_date, $holidays) {
        $grid = "<div class='days'>";
        
        // Calculate the weekday of the 1st day of the current BS month
        // This is used to determine how many empty cells to prepend.
        $first_day_of_month_weekday = $this->calculateFirstDay($year, $month);

        // Add empty cells for days before the 1st of the month
        for ($i = 1; $i < $first_day_of_month_weekday; $i++) {
            $grid .= "<div class='day empty'></div>";
        }

        // Get the total number of days in the current BS month/year
        $year_index = array_search($year, array_column($this->bs, 0));
        if ($year_index === false) {
            // Fallback: If the year is outside the defined BS range, use the last known year's pattern.
            $year_index = array_search(2090, array_column($this->bs, 0)); // Assuming 2090 is the last valid year in your data
        }
        $total_days_in_month = $this->bs[$year_index][$month];

        // Loop through each day of the month to generate cells
        for ($day = 1; $day <= $total_days_in_month; $day++) {
            $class = 'day';

            // Add 'today' class if it's the current date
            if ($year === $current_date['year'] &&
                $month === $current_date['month'] &&
                $day === $current_date['day']) {
                $class .= ' today';
            }

            // Check for holidays
            $holiday_name = '';
            foreach ($holidays as $holiday) {
                // Validate holiday data structure
                if (!isset($holiday['bs_date']) || !is_array($holiday['bs_date'])) {
                    error_log("NepaliCalendar: Invalid holiday data structure for holiday: " . json_encode($holiday));
                    continue;
                }
                $h_year = (int)($holiday['bs_date']['year'] ?? 0);
                $h_month = (int)($holiday['bs_date']['month'] ?? 0);
                $h_day = (int)($holiday['bs_date']['day'] ?? 0);

                // If a holiday matches the current day
                if ($h_year === $year && $h_month === $month && $h_day === $day) {
                    $class .= ' holiday'; // Add 'holiday' class
                    $holiday_name = htmlspecialchars($holiday['name'] ?? 'Unknown Holiday'); // Store holiday name
                    error_log("NepaliCalendar: Holiday matched: $holiday_name on $year-$month-$day");
                    break; // Found holiday for this day, no need to check further
                }
            }

            // Convert the Nepali day number to Nepali numerals (e.g., 1 -> १)
            $nepali_day_numeral = $this->convertToNepaliNumeral($day);
            // Convert current BS day to AD for English date display
            $ad_date_array = $this->convertBStoAD($year, $month, $day); // Get array: ['year', 'month', 'day']
            // For the displayed English date, use your existing format
            $english_date_display = date("M d", mktime(0, 0, 0, $ad_date_array['month'], $ad_date_array['day'], $ad_date_array['year']));

            // Generate the day cell HTML with onclick, onmouseover, onmouseout
            // CRITICAL: Pass individual AD year, month, day, and the 'event' object.
            // Addslashes to holiday_name for onmouseover to prevent JS errors if holiday name has quotes.
            $escaped_holiday_name = addslashes($holiday_name);

            $grid .= "<div class='$class' " .
                        "onclick='selectDate(".
                            $year.", ".        // bsYear
                            $month.", ".       // bsMonth
                            $day.", ".         // bsDay
                            $ad_date_array['year'].", ".  // adYear
                            $ad_date_array['month'].", ". // adMonth
                            $ad_date_array['day'].", ".   // adDay
                            "event)' " .        // JavaScript event object for click
                        "onmouseover='showDayDetailsHover(".
                            $year.", ".
                            $month.", ".
                            $day.", ".
                            $ad_date_array['year'].", ".
                            $ad_date_array['month'].", ".
                            $ad_date_array['day'].", ".
                            "\"".$escaped_holiday_name."\", ". // Holiday name as string, properly escaped
                            "event)' " .        // JavaScript event object for hover
                        "onmouseout='hideDayDetailsHover()'>"; // Hide on mouse out
            $grid .= "<span class='nepali-day-number'>$nepali_day_numeral</span>";
            $grid .= "<span class='english-day-number'>$english_date_display</span>"; // This is just for display on the grid
            if ($holiday_name) {
                $grid .= "<div class='holiday-name' data-holiday-name='".htmlspecialchars($holiday_name, ENT_QUOTES, 'UTF-8')."'>$holiday_name</div>";
            }
            $grid .= "</div>";
        }

        $grid .= "</div>"; // Close .days grid
        return $grid;
    }

    /**
     * Calculates the weekday (1=Sunday, 7=Saturday) of the first day of a given Nepali (BS) month.
     * It does this by converting the 1st BS day to AD and then using jdddayofweek.
     * @param int $year BS year.
     * @param int $month BS month.
     * @return int Weekday number (1 for Sunday, 7 for Saturday).
     */
    private function calculateFirstDay($year, $month) {
        $ref_date = $this->convertBStoAD($year, $month, 1); // Convert 1st day of BS month to AD
        // gregoriantojd: Converts a Gregorian date to a Julian day count.
        // jddayofweek(julian_day, 0): Returns the weekday (0=Sunday to 6=Saturday) for a Julian day.
        // We add 1 and then modulo by 7 (with ?: 7 for Saturday) to make it 1=Sunday to 7=Saturday.
        return (jddayofweek(gregoriantojd($ref_date['month'], $ref_date['day'], $ref_date['year']), 0) + 1) % 7 ?: 7;
    }

    /**
     * Converts a Nepali (BS) date to a Gregorian (AD) date.
     * This is the inverse of convertADtoBS, but involves summing days for each month/year.
     * @param int $bs_year Nepali year.
     * @param int $bs_month Nepali month.
     * @param int $bs_day Nepali day.
     * @return array Associative array with 'year', 'month', 'day' for the AD date.
     */
    private function convertBStoAD($bs_year, $bs_month, $bs_day) {
        // Find the closest reference point from the ad_to_bs mapping (which also contains BS reference)
        $ref = $this->findClosestReference($bs_year);
        
        $days_diff_from_ref_bs = 0;

        // Sum days from the reference BS year up to the target BS year
        for ($y = $ref[3]; $y < $bs_year; $y++) {
            $idx = array_search($y, array_column($this->bs, 0));
            if ($idx === false) {
                $idx = array_search(2090, array_column($this->bs, 0)); // Fallback
            }
            for ($m = 1; $m <= 12; $m++) {
                $days_diff_from_ref_bs += $this->bs[$idx][$m];
            }
        }

        // Sum days from the start of the target BS year up to the target BS month
        $year_index = array_search($bs_year, array_column($this->bs, 0));
        if ($year_index === false) {
            $year_index = array_search(2090, array_column($this->bs, 0)); // Fallback
        }
        for ($m = 1; $m < $bs_month; $m++) {
            $days_diff_from_ref_bs += $this->bs[$year_index][$m];
        }

        // Add the days within the target BS month (minus 1 because it's day-based)
        $days_diff_from_ref_bs += ($bs_day - 1);

        // Convert the reference AD date to Julian Day Count and add the calculated difference
        $jd = gregoriantojd($ref[1], $ref[2], $ref[0]) + $days_diff_from_ref_bs;
        
        // Convert the resulting Julian Day Count back to Gregorian date
        $ad_date_string = jdtogregorian($jd);
        list($month, $day, $year) = explode('/', $ad_date_string);

        return [
            'year' => (int)$year,
            'month' => (int)$month,
            'day' => (int)$day
        ];
    }
}
?>
